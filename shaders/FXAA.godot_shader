//Fast approximate anti-aliasing.
//This script is specifically for the Godot shading language.

//This is going to be a 2D shader, thus using canvas_item.
shader_type canvas_item;

uniform float FXAA_SPAN_MAX = 8.0;

uniform float FXAA_REDUCE_MUL = 0.011111111;

uniform float FXAA_REDUCE_MIN = 0.011111111;

uniform float FXAA_DETAIL_PRESERVE = 4.0;

//Width and height of the screen.
uniform float SCREENTEXTURE_Width = 640;
uniform float SCREENTEXTURE_Height = 480;

void fragment()
{
	vec2 SCREENTEXTURE_CoordOffset = vec2(1.0/SCREENTEXTURE_Width, 1.0/SCREENTEXTURE_Height);
	vec2 UV_ToUse = vec2(UV.x, (UV.y * -1.0) + 1.0);

	vec3 rgbNW = textureLod(SCREEN_TEXTURE, UV_ToUse + (vec2(-1.0, -1.0) * SCREENTEXTURE_CoordOffset), 0.0).rgb;
	vec3 rgbNE = textureLod(SCREEN_TEXTURE, UV_ToUse + (vec2(+1.0, -1.0) * SCREENTEXTURE_CoordOffset), 0.0).rgb;
	vec3 rgbSW = textureLod(SCREEN_TEXTURE, UV_ToUse + (vec2(-1.0, +1.0) * SCREENTEXTURE_CoordOffset), 0.0).rgb;
	vec3 rgbSE = textureLod(SCREEN_TEXTURE, UV_ToUse + (vec2(+1.0, +1.0) * SCREENTEXTURE_CoordOffset), 0.0).rgb;
	vec3 rgbM  = textureLod(SCREEN_TEXTURE, UV_ToUse, 0.0).rgb;
	
	vec3 luma = vec3(0.299, 0.587, 0.114);
	float lumaNW = dot(rgbNW, luma);
	float lumaNE = dot(rgbNE, luma);
	float lumaSW = dot(rgbSW, luma);
	float lumaSE = dot(rgbSE, luma);
	float lumaM  = dot( rgbM, luma);
	
	float lumaMin = min(lumaM, min(min(lumaNW, lumaNE), min(lumaSW, lumaSE)));
	float lumaMax = max(lumaM, max(max(lumaNW, lumaNE), max(lumaSW, lumaSE)));

	float lumaRange = abs(lumaMax - lumaMin);

	vec2 dir;
	dir.x = -((lumaNW + lumaNE) - (lumaSW + lumaSE));
	dir.y =  ((lumaNW + lumaSW) - (lumaNE + lumaSE));

	float texFac = min((1.25*FXAA_DETAIL_PRESERVE)*min(abs(dir.x), abs(dir.y)), 1.0);

	float dirReduce = max((lumaNW + lumaNE + lumaSW + lumaSE) * (0.25 * FXAA_REDUCE_MUL), FXAA_REDUCE_MIN);

	float rcpDirMin = 1.0/(min(abs(dir.x), abs(dir.y)) + dirReduce);
	
	dir = min(vec2(FXAA_SPAN_MAX,  FXAA_SPAN_MAX), 
        		max(vec2(-FXAA_SPAN_MAX, -FXAA_SPAN_MAX), dir * rcpDirMin)) * SCREENTEXTURE_CoordOffset;
		
	vec3 rgbA = (0.5) * (
				textureLod(SCREEN_TEXTURE, UV_ToUse + dir * (-0.166666667), 0.0).rgb +
				textureLod(SCREEN_TEXTURE, UV_ToUse + dir * (0.333333333), 0.0).rgb
				);

	float lumaA = dot(rgbA, luma);

	vec3 Bsample1 = textureLod(SCREEN_TEXTURE, UV_ToUse + dir * (-0.5), 0.0).rgb;
	float Bluma1 = dot(Bsample1, luma);
	vec3 Bsample2 = textureLod(SCREEN_TEXTURE, UV_ToUse + dir * (0.5), 0.0).rgb;
	float Bluma2 = dot(Bsample2, luma);

	vec3 rgbB = rgbA * (0.5) + (0.25) * (Bsample1+Bsample2);
	float lumaB = dot(rgbB, luma);

	float Xsign = lumaA > Bluma1 ? 1.0:-1.0;
	
	float peakFac =clamp( FXAA_DETAIL_PRESERVE*  max(  min(Xsign*(lumaA - Bluma1), Xsign*(lumaA - Bluma2))  , 0.0 )   /  (lumaRange+.0001) -0.25, 0.0, 1.0);
	
	vec3 color;
	if((lumaB < lumaMin) || (lumaB > lumaMax))
	{
		color = rgbA;
	}
	else
	{
		color = mix(rgbB, rgbA, peakFac);
	}
	
	COLOR.rgb = mix(color, rgbM, texFac);
	COLOR.a = 1.0;
}